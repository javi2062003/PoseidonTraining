plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id "com.github.node-gradle.node" version "7.0.1"
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

node {
    version = '18.17.0' // La versión de Node que usa tu frontend
    npmVersion = '9.6.7' // La versión de npm
    download = true
    workDir = file("${project.projectDir}/node_modules_gradle") // Directorio temporal para Node
    npmWorkDir = file("${project.projectDir}/npm_modules_gradle") // Directorio temporal para npm
}

tasks.register('npmInstallFrontend', NpmTask) {
    description = "Instal npm dependencies for frontend"
    workingDir = file("${project.projectDir}/frontend")
    args = ['install']
}

tasks.register('buildFrontend', NpmTask) {
    dependsOn npmInstallFrontend
    description = "Build frontend application"
    workingDir = file("${project.projectDir}/frontend")
    args = ['run', 'build'] // Asumiendo que tienes un script "build" en tu package.json
}

// Asegúrate de que el frontend se construya antes de preparar los recursos para el JAR
processResources.dependsOn(buildFrontend)

// Copia los artefactos del build del frontend a src/main/resources/static
// para que Spring Boot los sirva
tasks.register('copyFrontendToStatic', Copy) {
    dependsOn buildFrontend
    from "${project.projectDir}/frontend/build" // O la carpeta de salida de tu build (e.g., dist)
    into "${project.buildDir}/resources/main/static"
}

// Asegúrate de que la copia se haga antes de que se genere el JAR
bootJar.dependsOn(copyFrontendToStatic)